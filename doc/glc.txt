<linguagem>				::= <funcao> /*enquanto lista de tokens não estiver vazia*/
<funcao>				::= <tipo> identificador abre_parenteses <listaArg> fecha_parenteses abre_chaves fecha_chaves
<tipo>					::= int	|
							float |
							char |
							double
<listaArg>				::= <arg> |
							virgula <listaArg>
<arg>					::= <tipo> identificador
<declaracao>			::= <tipo> <listaIdentificadores>
<listaIdentificadores>	::= identificador |
							identificador virgula <listaIdentificadores>
<statementFinal>		::= <statementFor> |
							<statementWhile> |
							<expressaoFinalMesmo> ponto_virgula |
							<statementIf> |
							<statementEscopo> |
							<declaracao> |
							ponto_virgula
<statementFor>			::= for abre_parenteses <expressaoFinalMesmo> ponto_virgula <expressaoOpcional> ponto_virgula <expressaoOpcional> fecha_parenteses <statementFinal>
<expressaoOpcional>		::= <expressaoFinalMesmo> |
							ε
<statementWhile>		::= while abre_parenteses <expressaoFinalMesmo> fecha_parenteses <statementFinal>
<parteElse>				::= else <statementFinal> |
							ε
<statementEscopo>		::= abre_chaves <listaStatement> fecha_chaves
<listaStatement>		::= <statementFinal> <listaStatementLinha>
<listaStatementLinha>	::= <statementFinal> <listaStatementLinha> |
							ε
						
						
						
<statement>		 		::=	if <condicao>
<condicao> 				::=	<expressao> <condicaoLinha>
<expressao>				::=	<expressaoFinal> <expressaoLinha>
<expressaoFinal> 		::= abre_parenteses <condicao> fecha_parenteses |
							identificador
<condicaoLinha>			::= mais <expressao> <condicaoLinha> |
							ε
<expressaoLinha>		::= vezes <expressaoFinal> <condicaoLinha> |
							ε

---------------------------------------------------------------------------------
<funcao>				::= <tipo> identificador ( <listaArg> ) <statementComposto> 

|ε		